// Code generated by MockGen. DO NOT EDIT.
// Source: volume.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/strugglehonor/KCS/internal/model"
)

// MockVolumeStore is a mock of VolumeStore interface.
type MockVolumeStore struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeStoreMockRecorder
}

// MockVolumeStoreMockRecorder is the mock recorder for MockVolumeStore.
type MockVolumeStoreMockRecorder struct {
	mock *MockVolumeStore
}

// NewMockVolumeStore creates a new mock instance.
func NewMockVolumeStore(ctrl *gomock.Controller) *MockVolumeStore {
	mock := &MockVolumeStore{ctrl: ctrl}
	mock.recorder = &MockVolumeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeStore) EXPECT() *MockVolumeStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVolumeStore) Create(ctx context.Context, volume *model.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVolumeStoreMockRecorder) Create(ctx, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVolumeStore)(nil).Create), ctx, volume)
}
