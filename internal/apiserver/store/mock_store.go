// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockFactory) Cluster() ClusterStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(ClusterStore)
	return ret0
}

// Cluster indicates an expected call of Cluster.
func (mr *MockFactoryMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockFactory)(nil).Cluster))
}

// Deployment mocks base method.
func (m *MockFactory) Deployment() DeploymentStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployment")
	ret0, _ := ret[0].(DeploymentStore)
	return ret0
}

// Deployment indicates an expected call of Deployment.
func (mr *MockFactoryMockRecorder) Deployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployment", reflect.TypeOf((*MockFactory)(nil).Deployment))
}

// Pod mocks base method.
func (m *MockFactory) Pod() PodStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pod")
	ret0, _ := ret[0].(PodStore)
	return ret0
}

// Pod indicates an expected call of Pod.
func (mr *MockFactoryMockRecorder) Pod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pod", reflect.TypeOf((*MockFactory)(nil).Pod))
}

// Volume mocks base method.
func (m *MockFactory) Volume() VolumeStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Volume")
	ret0, _ := ret[0].(VolumeStore)
	return ret0
}

// Volume indicates an expected call of Volume.
func (mr *MockFactoryMockRecorder) Volume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Volume", reflect.TypeOf((*MockFactory)(nil).Volume))
}
