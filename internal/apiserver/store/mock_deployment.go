// Code generated by MockGen. DO NOT EDIT.
// Source: deployment.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/strugglehonor/KCS/internal/model"
)

// MockDeploymentStore is a mock of DeploymentStore interface.
type MockDeploymentStore struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentStoreMockRecorder
}

// MockDeploymentStoreMockRecorder is the mock recorder for MockDeploymentStore.
type MockDeploymentStoreMockRecorder struct {
	mock *MockDeploymentStore
}

// NewMockDeploymentStore creates a new mock instance.
func NewMockDeploymentStore(ctrl *gomock.Controller) *MockDeploymentStore {
	mock := &MockDeploymentStore{ctrl: ctrl}
	mock.recorder = &MockDeploymentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentStore) EXPECT() *MockDeploymentStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeploymentStore) Create(ctx context.Context, deployment *model.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDeploymentStoreMockRecorder) Create(ctx, deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeploymentStore)(nil).Create), ctx, deployment)
}

// Delete mocks base method.
func (m *MockDeploymentStore) Delete(ctx context.Context, depployment *model.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, depployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentStoreMockRecorder) Delete(ctx, depployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentStore)(nil).Delete), ctx, depployment)
}

// InsertDeployment mocks base method.
func (m *MockDeploymentStore) InsertDeployment(ctx context.Context, depployment *model.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDeployment", ctx, depployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDeployment indicates an expected call of InsertDeployment.
func (mr *MockDeploymentStoreMockRecorder) InsertDeployment(ctx, depployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDeployment", reflect.TypeOf((*MockDeploymentStore)(nil).InsertDeployment), ctx, depployment)
}

// Update mocks base method.
func (m *MockDeploymentStore) Update(ctx context.Context, deployment *model.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDeploymentStoreMockRecorder) Update(ctx, deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeploymentStore)(nil).Update), ctx, deployment)
}
